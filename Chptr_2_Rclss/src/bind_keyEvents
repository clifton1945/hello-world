/**
 *  handleKeyPresses(fn)
 *  160826  @1122   -> WIP added a Fn parameter to figure out how to update the Rclsses
 *  160825  @1735  -> STABLE seeing each key press AND NOT also seeing the default action.
 *      @1610 REFACT handleKeyPresses WAS bindHandlers
 * FILE:: bind_keyEvents.js  [some event ->  scrolls | reads | selects  the next or last verse]
 */

"use strict";
// var assert = require('assert');
// var R = require('ramda');
var h = require('./h');

/**
 *      ----- handleKeyPresses:: (a key event) -> N:: (+1||-1) value
 *      USED to increment the beginning of current Rclss DIV children
 * @constructor
 */
var _handleKeyPresses = function _handleKeyPresses(fn) {
    // KEY Events ********* NOTE: need BOTH keyup and keydown to stop default*************
    document.addEventListener("keyup", keyActions, false);
    document.addEventListener("keydown", keyActions, false);
    var n = 1;//FIX
    function keyActions(e) {
        // read Last Chapter
        if (e.keyCode == 37) {
            e.preventDefault();
            e.stopPropagation();
            h.C_Both("read Last Chptr");
            fn(-5);
            // n += -5; // FIX
        }
        // read Last verse.
        if (e.keyCode == 38) {
            e.preventDefault();
            e.stopPropagation();
            h.C_Both("read Last Verse");
            fn(-1);
            // n += -1; // TODO limit this
        }
        // read Next Chptr.
        if (e.keyCode == 39 || e.keyCode == 96) { // rt arrow || num pad 0
            e.preventDefault();
            e.stopPropagation();
            h.C_Both("read Next Chptr ");
            n += 5;
        }
        // read Next verse.
        if (e.keyCode == 32 || e.keyCode == 40) {
            e.preventDefault();
            e.stopPropagation();
            h.C_Both("read Next Verse");
             n += +1;// TODO limit this
        }
        return n
    }
     return n
};
exports.handleKeyPresses = _handleKeyPresses;


// click Events **********************
// DEPR use of book till need CLICK EVENTS var BindHandlers = function BindHandlers(book)
//     var selectedRange = null;
//     var getSelectedRange = function () {
//         try {
//             if (window.getSelection) {
//                 selectedRange = window.getSelection().getRangeAt(0);
//             } else {
//                 selectedRange = document.getSelection().getRangeAt(0);
//             }
//         } catch (err) {
//         }
//         //console.log('selectedRange:' + selectedRange.toString());
//     };
//     // add event listener to table
//     let b = document.querySelector('.book');
//     b.addEventListener("click",
//         () => {
//             getSelectedRange();
//             let el = document.querySelector('#result');
//             el.textContent= selectedRange.toString();
//             console.log(`textContent:${el.textContent}`);
//         },false
//     );
// };

